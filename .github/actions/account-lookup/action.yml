name: "Lookup Account ID from Name"
description: "Given a friendly name for an organizational account, finds it's corresponding account id."
inputs:
  env:
    description: "The environment we want to deploy into."
    required: true
outputs:
  # account-id:
  #   description: "The ID of the AWS Account that corresponds to the account name input"
  #   value: ${{ steps.lookup-account-id.outputs.account-id }}
  project-context:
    description: "The full Project Context"
    value: ${{ steps.get-project-context.outputs.project-context }}
  tooling-account:
    description: "The ID of the Tooling Account"
    value: ${{ steps.get-project-context.outputs.tooling-account }}
  account:
    description: "The ID of the Account assigned to the current environment"
    value: ${{ steps.get-project-context.outputs.account }}
  project:
    description: "The name of the Project"
    value: ${{ steps.get-project-context.outputs.project }}
runs:
  using: composite
  steps:
    - name: Apt-Install-AWS-CLI
      run: |
        sudo apt-get install awscli
        aws --version
        aws sts get-caller-identity
      shell: bash
    - name: Get-Project-Context
      run: |
        PROJECT_CONTEXT=$(aws ssm get-parameter --name project_context --query "Parameter.Value" --output text)
        echo "project-context=${PROJECT_CONTEXT}"
        TOOLING_ACCOUNT=$(echo "${{ toJSON(PROJECT_CONTEXT) }}" | yq -r .accounts.tooling)
        ACCOUNT``=$(echo "${{ toJSON(PROJECT_CONTEXT) }}" | yq -r .accounts.${{ inputs.env }})
        PROJECT=$(echo "${{ toJSON(PROJECT_CONTEXT) }}" | yq -r .project)
        echo "project-context=${PROJECT_CONTEXT}" >> "$GITHUB_OUTPUT"
        echo "tooling-account=${TOOLING_ACCOUNT}" >> "$GITHUB_OUTPUT"
        echo "account=${ACCOUNT}" >> "$GITHUB_OUTPUT"
        echo "project=${PROJECT}" >> "$GITHUB_OUTPUT"
      shell: bash
    # - name: List-Org-Accounts
    #   id: lookup-account-id
    #   run: |
    #     ACCOUNT_ID=$(aws organizations list-accounts --query "Accounts[?Name == '${{ inputs.account }}'].Id | [0]" --output text)
    #     echo "account-id=${ACCOUNT_ID}"
    #     echo "account-id=${ACCOUNT_ID}" >> "$GITHUB_OUTPUT"
    #   shell: bash
    # - name: Assert-Account-ID-Present
    #   if: ${{ steps.lookup-account-id.outputs.account == '' }}
    #   run: |
    #     echo "Could not find Account ID from Account Name: '${{ inputs.account }}' (got: ${{ steps.lookup-account-id.outputs.account-id }})"; exit 1;
    #   shell: bash
