name: "On AWS"
description: "Initializes GitHub OIDC and STS AssumeRole"
inputs:
  region:
    description: "The AWS Region to deploy into."
    required: true
  ci-role-arn:
    description: "The IAM Role ARN which supports GitHub OIDC."
    required: true
  account:
    description: "The name of the AWS account we are deploying into."
    required: true
  project:
    description: "The name of the project that this is part of."
    required: true
  artifact:
    description: "The name of the artifact being deployed. Will be used to format the name of the deployment role."
    required: true
runs:
  using: "composite"
  steps:
    # SSO into the AWS role & account assigned by the `ci-role-arn` parameter.
    - name: AWS-GitHub-OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.ci-role-arn }}
        role-session-name: CI-GitHub-Action
        aws-region: ${{ inputs.region }}
    # Now we are authenticated into that role.
    # Find the account id of the `account` parameter, which is a name.
    - name: Lookup-Account-ID-From-Name
      id: lookup-account-id
      uses: jfdi-dev/pipelines/.github/actions/account-lookup@main
      with:
        account: ${{ inputs.account }}
    # With the Account ID and a Role Name, we can format a Role ARN
    - name: Format-Role-Arn
      id: format-role-arn
      uses: jfdi-dev/pipelines/.github/actions/format-deployment-role-arn@main
      with:
        account-id: ${{ steps.lookup-account-id.outputs.account-id }}
        project: ${{ inputs.project }}
        artifact: ${{ inputs.artifact }}
    # Assume the formatted Role
    - name: AWS-Assume-Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ steps.format-role-arn.outputs.role-arn }}
        role-skip-session-tagging: true
        role-chaining: true
