name: "Run Terraform"
description: "Setup Terraform for pipeline use, tf init, tf apply"
inputs:
  region:
    description: "The region to deploy into"
    required: true
  project-context:
    description: "The full Project Context"
  account:
    description: "The ID of the AWS Account to deploy into"
  role:
    description: "The ARN of the Role to assume to deploy with"
  artifact:
    description: "The name of the artifact to deploy."
  dir:
    description: "The directory which contains the Terraform module to deploy."
    required: false
outputs:
  terraform-output:
    description: "The JSON output from Terraform"
    value: ${{ steps.terraform-output.outputs.terraform-output }}
runs:
  using: "composite"
  steps:
    - name: Setup-Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.3
    - name: Create-Backend-Config
      working-directory: ${{ inputs.dir }}
      run: |
        echo 'bucket="${{ fromJSON(inputs.project-context).terraform.state }}"' >> ./config.s3.tfbackend
        echo 'dynamodb_table="${{ fromJSON(inputs.project-context).terraform.locks }}"' >> ./config.s3.tfbackend
        echo 'key="${{ inputs.account }}/${{ github.repository }}/${{ inputs.artifact }}"' >> ./config.s3.tfbackend
      shell: bash
    - name: Terraform-Init
      working-directory: ${{ inputs.dir }}
      run: |
        terraform init -input=false -backend-config=./config.s3.tfbackend
      shell: bash
    - name: Create-AWS-Provider
      working-directory: ${{ inputs.dir }}
      run: |
        cat << EOF > ./provider.tf
        provider aws {
          assume_role {
            role_arn = "${{ inputs.role }}"
          }
        }
        EOF
      shell: bash
    # - name: Create-AWS-Config
    #   working-directory: ${{ inputs.dir }}
    #   run: | 
    #     echo "[default]" >> ./aws-config
    #     echo "role_arn=${{ inputs.role }}" >> ./aws-config
    #     echo "role_session_name=CI-SESSION" >> ./aws-config
    #     echo AWS_CONFIG_FILE='./aws-config' >> $GITHUB_ENV
    #   shell: bash
    # - name: Create-Context-Config
    #   id: create-context-config
    #   working-directory: ${{ inputs.dir }}
    #   run: |
    #     echo TF_VAR_region='${{ inputs.region }}' >> $GITHUB_ENV
    # shell: bash
    - name: Terraform-Apply
      working-directory: ${{ inputs.dir }}
      run: |
        terraform apply -input=false -auto-approve
      shell: bash
    - name: Terraform-Output
      id: terraform-output
      working-directory: ${{ inputs.dir }}
      run: |
        terraform output -json
        TERRAFORM_OUTPUT=$(terraform output -json | yq . -j -I0)
        echo "terraform-output=${TERRAFORM_OUTPUT}"
        echo "terraform-output=${TERRAFORM_OUTPUT}" >> "$GITHUB_OUTPUT"
      shell: bash
